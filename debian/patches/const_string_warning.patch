--- a/kexec/arch/i386/kexec-elf-x86.c
+++ b/kexec/arch/i386/kexec-elf-x86.c
@@ -91,7 +91,7 @@ int elf_x86_load(int argc, char **argv,
 	char *command_line = NULL, *modified_cmdline = NULL;
 	const char *append = NULL;
 	char *tmp_cmdline = NULL;
-	char *error_msg = NULL;
+	int error_code = 0;
 	int result;
 	int command_line_len;
 	const char *ramdisk;
@@ -218,7 +218,7 @@ int elf_x86_load(int argc, char **argv,
 		elf_rel_set_symbol(&info->rhdr, "entry32_regs", &regs, sizeof(regs));
 
 		if (ramdisk) {
-			error_msg = "Ramdisks not supported with generic elf arguments";
+			error_code = 1;
 			goto out;
 		}
 	}
@@ -289,13 +289,20 @@ int elf_x86_load(int argc, char **argv,
 		elf_rel_set_symbol(&info->rhdr, "entry32_regs", &regs, sizeof(regs));
 	}
 	else {
-		error_msg = "Unknown argument style\n";
+		error_code = 2;
 	}
 
 out:
 	free(command_line);
 	free(modified_cmdline);
-	if (error_msg)
-		die(error_msg);
+	switch (error_code) {
+		case 1:
+			die("Ramdisks not supported with generic elf arguments");
+		case 2:
+			die("Unknown argument style\n");
+
+		default:
+			break;
+	}
 	return result;
 }
--- a/kexec/arch/x86_64/kexec-elf-x86_64.c
+++ b/kexec/arch/x86_64/kexec-elf-x86_64.c
@@ -99,7 +99,7 @@ int elf_x86_64_load(int argc, char **arg
 #define ARG_STYLE_NONE  2
 	int opt;
 	int result = 0;
-	char *error_msg = NULL;
+	int error_code = 0;
 
 	/* See options.h and add any new options there too! */
 	static const struct option options[] = {
@@ -207,7 +207,7 @@ int elf_x86_64_load(int argc, char **arg
 		elf_rel_set_symbol(&info->rhdr, "entry64_regs", &regs, sizeof(regs));
 
 		if (ramdisk) {
-			error_msg = "Ramdisks not supported with generic elf arguments";
+			error_code = 1;
 			goto out;
 		}
 	}
@@ -269,13 +269,21 @@ int elf_x86_64_load(int argc, char **arg
 		elf_rel_set_symbol(&info->rhdr, "entry64_regs", &regs, sizeof(regs));
 	}
 	else {
-		error_msg = "Unknown argument style\n";
+		error_code = 2;
 	}
 
 out:
 	free(command_line);
 	free(modified_cmdline);
-	if (error_msg)
-		die(error_msg);
+	switch (error_code) {
+		case 1:
+			die("Ramdisks not supported with generic elf arguments");
+
+		case 2:
+			die("Unknown argument style\n");
+
+		default:
+			break;
+	}
 	return result;
 }
--- a/kexec/arch/ppc/kexec-elf-ppc.c
+++ b/kexec/arch/ppc/kexec-elf-ppc.c
@@ -160,7 +160,7 @@ int elf_ppc_load(int argc, char **argv,
 	int command_line_len, crash_cmdline_len;
 	char *dtb;
 	int result;
-	char *error_msg;
+	int error_code = 0;
 	unsigned long max_addr, hole_addr;
 	struct mem_phdr *phdr;
 	size_t size;
@@ -199,7 +199,6 @@ int elf_ppc_load(int argc, char **argv,
 	kernel_addr = 0;
 	ramdisk = 0;
 	result = 0;
-	error_msg = NULL;
 
 	while ((opt = getopt_long(argc, argv, short_options, options, 0)) != -1) {
 		switch (opt) {
@@ -360,7 +359,7 @@ int elf_ppc_load(int argc, char **argv,
 				(unsigned long *)&blob_size, cmdline_buf);
 	}
 	if (!blob_buf || !blob_size) {
-		error_msg = "Device tree seems to be an empty file.\n";
+		error_code = 1;
 		goto out2;
 	}
 
@@ -397,7 +396,7 @@ int elf_ppc_load(int argc, char **argv,
 	dtb_addr_actual = add_buffer(info, blob_buf, blob_size, blob_size, 0, dtb_addr,
 			kernel_addr + KERNEL_ACCESS_TOP, 1);
 	if (dtb_addr_actual != dtb_addr) {
-		error_msg = "Error device tree not loadded to address it was expecting to be loaded too!\n";
+		error_code = 2;
 		goto out2;
 	}
 
@@ -452,8 +451,14 @@ out:
 	free(crash_cmdline);
 	if (!tmp_cmdline)
 		free(command_line);
-	if (error_msg)
-		die(error_msg);
+	switch (error_code) {
+	case 1:
+		die("Device tree seems to be an empty file.\n");
+	case 2:
+		die("Error device tree not loadded to address it was expecting to be loaded too!\n");
+	default:
+		break;
+	}
 
 	return result;
 }
--- a/kexec/arch/ppc/kexec-uImage-ppc.c
+++ b/kexec/arch/ppc/kexec-uImage-ppc.c
@@ -103,7 +103,7 @@ static int ppc_load_bare_bits(int argc,
 	unsigned long max_addr;
 	char *blob_buf = NULL;
 	off_t blob_size = 0;
-	char *error_msg = NULL;
+	int error_code = 0;
 
 	cmdline_buf = NULL;
 	command_line = NULL;
@@ -223,7 +223,7 @@ static int ppc_load_bare_bits(int argc,
 				(unsigned long *)&blob_size, cmdline_buf);
 	}
 	if (!blob_buf || !blob_size) {
-		error_msg = "Device tree seems to be an empty file.\n";
+		error_code = 1;
 		goto out2;
 	}
 
@@ -261,7 +261,7 @@ static int ppc_load_bare_bits(int argc,
 			load_addr + KERNEL_ACCESS_TOP, 1);
 	if (dtb_addr_actual != dtb_addr) {
 		printf("dtb_addr_actual: %lx, dtb_addr: %lx\n", dtb_addr_actual, dtb_addr);
-		error_msg = "Error device tree not loadded to address it was expecting to be loaded too!\n";
+		error_code = 2;
 		goto out2;
 	}
 
@@ -305,8 +305,15 @@ out:
 	free(crash_cmdline);
 	if (!tmp_cmdline)
 		free(command_line);
-	if (error_msg)
-		die(error_msg);
+	switch (error_code) {
+	case 1:
+		die("Device tree seems to be an empty file.\n");
+	case 2:
+		die("Error device tree not loadded to address it was expecting to be loaded too!\n");
+	default:
+		break;
+	}
+
 	return ret;
 }
 
